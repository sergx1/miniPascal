%{

#include <iostream>
#include <cstdlib>
#include <map>
#include <vector>
#include <string>
#include "izraz.hpp"
#include "naredba.hpp"
#define YYDEBUG 1

using namespace std;

void yyerror(string s) {
	cerr << "Sintaksna greska: " << s << endl;
	exit(EXIT_FAILURE);
}

int yylex();

map<string, int> tablica;


%}
%union {
	int d;
	string *s;
	Izraz *i;
	Naredba *n;
	vector<Naredba*> *v;
}

%token <d> num_token
%token mod_token
%token ispisi_token unesi_token ako_je_token onda_token inace_token dok_je_token radi_sledece_token
%token <s> string_token id_token
%token pocetak_token
%token kraj_token
%token dodela_token

%type <i> E
%type <n> Naredba Blok
%type <v> NizNaredbi

%nonassoc ':'
%nonassoc inace_token
%left '<' '>'
%left '+' '-'
%left '*' '/' mod_token

%%

Program: Blok '.' {
	$1->izvrsi();
}
;

Blok: pocetak_token NizNaredbi kraj_token {
	$$ = new Blok(*$2);
	delete $2;
}
;

NizNaredbi: NizNaredbi ';' Naredba {
	$$ = $1;
	$$->push_back($3);
}
| Naredba {
	$$ = new vector<Naredba*>();
	$$->push_back($1);
}
;

Naredba: ispisi_token '(' string_token ')' {
	$$ = new IspisS(*$3);
	delete $3;
}
| ispisi_token '(' E ')' {
	$$ = new IspisE($3);
}
| id_token dodela_token E {
	$$ = new NaredbaDodele(*$1, $3);
	delete $1;
}
| unesi_token '(' id_token ')' {
	$$ = new Unesi(*$3);
	delete $3;
}
| ako_je_token E onda_token ':' Naredba inace_token ':' Naredba {
	$$ = new AkoJeOndaInace($2, $5, $8);
}
| ako_je_token E onda_token ':' Naredba {
	$$ = new AkoJeOnda($2, $5);
}
| dok_je_token E radi_sledece_token ':' Naredba {
	$$ = new DokJe($2, $5);
}
| Blok {
	$$ = $1;
}
;

E: E '+' E {
	$$ = new Zbir($1, $3);
}
|  E '-' E {
	$$ = new Razlika($1, $3);
}
|  E '*' E {
	$$ = new Proizvod($1, $3);
}
|  E '/' E {
	$$ = new Kolicnik($1, $3);
}
|  E '>' E {
	$$ = new Vece($1, $3);
}
|  E '<' E {
	$$ = new Manje($1, $3);
}
|  E mod_token E {
	$$ = new Mod($1, $3);
}
|  '(' E ')' {
	$$ = $2;
}
|  id_token {
	$$ = new Promenljiva(*$1);
	delete $1;
}
|  num_token {
	$$ = new Konstanta($1);
}
;

%%

extern FILE* yyin;

int main(int argc, char** argv) {
	if(argc != 2)
		yyerror("Pogresan broj argumenata");
	if((yyin = fopen(argv[1], "r")) == NULL)
		yyerror("Neuspesno otvaranje datoteke");
	// yydebug = 1;
	yyparse();
	fclose(yyin);
	return 0;
}